@startuml
package excel.model {
  interface Expression {
    + evaluate(SpreadsheetModel) : CellValue
  }

  class BinaryArithmeticExpression {
    - left: Expression
    - right: Expression
    - operator: Operator
    + enum Operator { ADD, SUBTRACT, MULTIPLY, DIVIDE }
    + evaluate()
  }

  class ComparisonExpression {
    - left: Expression
    - right: Expression
    - operator: Operator
    + enum Operator { EQUAL, NOT_EQUAL, GREATER_THAN, LESS_THAN, GREATER_OR_EQUAL, LESS_OR_EQUAL }
    + evaluate()
  }

  class LogicalExpression {
    - left: Expression
    - right: Expression?
    - operator: Operator
    + enum Operator { AND, OR, NOT }
    + evaluate()
  }

  class LiteralExpression {
    - value: CellValue
    + evaluate()
  }

  class ReferenceExpression {
    - cellReference: String
    - sourceCell: Cell
    + evaluate()
  }

  class FunctionExpression {
    - rangeStart: String
    - rangeEnd: String
    - cellSource: Cell
    + evaluate()
  }

  Expression <|.. BinaryArithmeticExpression
  Expression <|.. ComparisonExpression
  Expression <|.. LogicalExpression
  Expression <|.. LiteralExpression
  Expression <|.. ReferenceExpression
  Expression <|.. FunctionExpression

  class Cell {
    - row: int
    - column: int
    - content: StringProperty
    - value: ObjectProperty<CellValue>
    - expression: Expression
    - spreadsheet: SpreadsheetModel
    + getAddress(): String
    + updateValue()
    + recalculate()
  }

  class SpreadsheetModel {
    - rowCount: int
    - columnCount: int
    - cells: Cell[][]
    - expressionBuilder: ExpressionBuilder
    + getCell(int, int): Cell
    + addDependency(Cell, Cell)
    + notifyCellChanged(Cell)
  }

  class ExpressionBuilder {
    - spreadsheet: SpreadsheetModel
    + build(String, Cell): Expression
  }

  class CellValue {
    - Type type
    - textValue: String
    - numberValue: double
    - booleanValue: boolean
    - errorValue: CellError
    + ofText(String): CellValue
    + ofNumber(double): CellValue
    + ofBoolean(boolean): CellValue
    + ofError(CellError): CellValue
  }

  enum Type {
    TEXT
    NUMBER
    BOOLEAN
    ERROR
  }

  enum CellError {
    SYNTAX_ERROR
    VALUE_ERROR
    CIRCULAR_REF
  }

  class CircularReferenceException << (E, #FF0000) Exception >> {
    + CircularReferenceException(String)
  }

  Cell --> SpreadsheetModel
  Cell --> CellValue
  Cell --> Expression
  Cell --> CellError
  SpreadsheetModel o-- "*" Cell
  SpreadsheetModel --> ExpressionBuilder
  ExpressionBuilder --> SpreadsheetModel
  ExpressionBuilder --> Expression
  CellValue --> Type
  CellValue --> CellError
  ReferenceExpression --> Cell
  FunctionExpression --> Cell
  BinaryArithmeticExpression --> "2" Expression
  ComparisonExpression --> "2" Expression
  LogicalExpression --> "1..2" Expression
  LiteralExpression --> CellValue
  CircularReferenceException -[hidden]-> Cell
}
@enduml